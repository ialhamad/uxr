extends /specs/products/aps/page-structure/structure/templates/structure/layout-tmpl.jade

block content

    include /specs/page-structure/helpers/print-json-mixin.jade
    include /specs/page-structure/helpers/print-js-code-mixin.jade

    section.source_section
        h2 Defaults & branding
        h3 Default variables and how to proceed with branding
        p Target of branding is to set 10+- color variables and that's it ... if graphics creates customizations for some component, than, and only than you should be forced to set more variables
        markdown
            | * `$primary`
            | * `$secondary`
            | * `$dark`
            | * `$light`
            | * `$success`
            | * `$danger`
            | * `$warning`
            | * `$info`
        p Components should inherit those basic variables as much as possible and they should not be used directly.
        p Every component should have properly named variables in defaults of its own - to enable separate branding for them, but changing those in YAMLs should NOT be necessary in most cases.
        p
            i Future target - this could be branded from new page builder 3 - which means, basic branding could be done by non-programmer
        p
            i Future target - #{" "}
                a(href="https://confluence.atypon.com/display/UI/UX3+Theming") Theming (use multiple color schemes on one product)

        h4 Variable naming
        p Variables should be named semantically - BEM like
        markdown
            | * params of mixins, functions don't have to follow same suit
            | * avoid using word "default" - you are only duplicating information by it
            | * don't use variables which has value you want on place, where their semantic name doesn't make any sense
        h5 Correct examples
        code.src-css.source_visible
            .source_example.
                $link-color // default link color
                $btn-primary-color
                $btn--primary--color
                $nav-link-hover-color
                $nav__link--color
                $nav__link--hover--color

        h5 Incorrect examples
        code.src-css.source_visible
            .source_example.
                $primary-button-color
                $default-link-bg-color
                $green-bg
                $primary-decoration
                $tertiary-bg

        h3 Available flags - for quick enabling features globally
        markdown
            | * `$enable-backward-compatibility` **default: true** - important one, by this you can disable/enable support for deprecated variables and so on ... for non-refactored products (which is most of them)
            | * `$enable-warnings` when you enable warnings, you will see warnings in console, for example when your colors doesn't meet WCAG AA contrasting ratio
            | * `$enable-contrast-function` this will enable to check contrast ratio based on level of accessibility - `$wcag__expected-contrast-ratio`
            | * `$enable-contrast-function-yiq` this will enable to use faster function for luminance threshold checking YIQ, WCAG relative luminance is used otherwise in all cases
            | * `$enable-enforce-contrasts` **default: true** - when `$enable-contrast-function` is enabled, @mixin pick-color() will try to enforce contrast by darken/lighten result color
            | * `$enable-text-shadow` **default: false** - swith usage of text-shadow under conditions (for example :focus on links)
            p Flags should be prefixed with `enable`, `disable` or `use` keywords and they should be booleans.

        h3 All Defaults you can override in YAMLs (explained in next sections)
        p
            i Click "Show source code" to expand them
        code.src-css
            .source_example
                include /specs/ux3/variables/scss/default-variables.scss

        h3 How to deprecate/rename variable without any refactoring needed
        markdown
            p Please check `default-variables.scss` - `backward compatibility` section (in previous section of this doc)
            p To rename variable, set new variable in this file in appropriate place, and add (into condition of `backward compatibility` section) example:
            code.src-css.source_visible
                .source_example.
                    @if($enable-backward-compatibility) {
                        $new-variable-name: $old-one !default !global;
                    }
            p Note: if you have your product refactored, and it doesn't use any deprecated variable, not even from UX3 level, you can set `$enable-backward-compatibility` to false in your YAML.
            p It is good practise for new products to avoid using any deprecated variable.




    section.source_section
        h2 YAML Aliases
        p Aliases are alternative or more significant names for a defined data objects. We use Aliases to hold global defined values to be used within different variables such as colors Hex values.
        h3 Aliases file structure
        p The following example demonstrate the structure of aliases file
        code.src-yaml.source_visible.source_example
            | aliases:
            |   # Basic Colors
            |   ALIAS_NAME: "Alias value"
            |   TRANSPARENT: "transparent"
            |   BLACK: "#000000"
            |   WHITE: "#FFFFFF"
            |   GRAY: "#333333"
        markdown
            p `aliases:` defines that the type of those values are aliases. Comments line must start with `#`. Each alias has a name and a value. To use aliases within your variables / yaml file you must include your aliases file at the top of your file.
        code.src-yaml.source_visible.source_example
            | imports:
            |     - ../aliases/colors.yam
    section.source_section
        h2 YAML Variables (overrides defaults)
        p We use variables to hold shared values across products.
        h3 Variables file structure
        p The following example demonstrate the structure of variables file
        code.src-yaml.source_visible.source_example
            | ---
            | # colors-variables.yaml
            |   global:
            |     type: "color/hex"
            |     category: "colors"
            |     cssProperties:
            |     - '*color'
            |     - 'background*'
            |     - 'border*'
            |   imports:
            |     - ../aliases/[aliases-file].yaml
            |   props:
            |     variable-name:
            |       value: "variable-value"
            |       Comment: "comment to be added above the variable"
            |       suffix: "comment to be added right after the variable"
            |       extension: "!default"
            |     variable-holds-alias:
            |       value: "{!WHITE}"
            |       comment" "WHITE is an alias that holds '#fff' as a value"
        markdown
            p `global:` is a list of objects that will be merged into each property, any values defined on a property level will take precedence. `props:` a map of property names and value objects. To use aliases with in your variables/yaml file you must include your alias file at the top of your variables/yaml file as provided in the example.

        h4 Pre-defined types
            markdown
                ul
                    li   `color/rgb`
                        |   Parse the value as a color and return an rgb(a) string
                    li   `color/hex`
                        |   Parse the value as a color and return an 6 digit hex string
                    li   `color/hex8rgba`
                        |   Parse the value as a color and return an 8 digit hex string in the form RRGGBBAA (as defined by the CSS Color specification).
                    li   `color/hex8argb`
                        |   Parse the value as a color and return an 8 digit hex string in the form AARRGGBB (as used for colors in Android).
                    li   `percentage/float`
                        |   Parse a string percentage value and return a float representation
                    li   `relative/pixel`
                        |   Parse a relative size value (em/rem) and return a pixel representation. By default, the baseFontSize is set to 16 and the baseFontPercentage is set to 1. These values can be overwritten in a property's .meta object.
                    li   `relative/pixelValue`
                        |   Same as relative/pixel, but removes the px extension
